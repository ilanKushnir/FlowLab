version: '3.8'

networks:
  homeai:
    name: ${DOCKER_NETWORK:-homeai_network}
    driver: bridge

volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  freqtrade_data:
    driver: local
  portainer_data:
    driver: local

services:
  # =============================================================================
  # DATABASE - PostgreSQL
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - homeai
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # N8N - Workflow Automation
  # =============================================================================
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT:-5678}:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - GENERIC_TIMEZONE=${TZ:-UTC}
      - N8N_LOG_LEVEL=info
      - N8N_DISABLE_UI=false
      - N8N_METRICS=false
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows/n8n:/tmp/workflows:ro
    networks:
      - homeai
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # SEARXNG - Privacy Search Engine 
  # =============================================================================
  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    restart: unless-stopped
    ports:
      - "${SEARXNG_PORT:-8080}:8080"
    environment:
      - SEARXNG_BASE_URL=http://localhost:8080
    volumes:
      - ./services/searxng/settings.yml:/etc/searxng/settings.yml:ro
    networks:
      - homeai
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # FREQTRADE - Crypto Market Data API
  # =============================================================================
  freqtrade:
    image: freqtradeorg/freqtrade:stable
    container_name: freqtrade
    restart: unless-stopped
    ports:
      - "${FREQTRADE_PORT:-8081}:8080"
    command: ["webserver", "--config", "/freqtrade/user_data/config.json"]
    volumes:
      - freqtrade_data:/freqtrade/user_data
      - ./services/freqtrade/config.json:/freqtrade/user_data/config.json:ro
      - ./services/freqtrade/strategies:/freqtrade/user_data/strategies:ro
    networks:
      - homeai
    healthcheck:
      test: ["CMD", "freqtrade", "show-config", "--config", "/freqtrade/user_data/config.json"]
      interval: 60s
      timeout: 30s
      retries: 3

  # =============================================================================
  # PORTAINER - Container Management
  # =============================================================================
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "${PORTAINER_PORT:-9000}:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - homeai

  # =============================================================================
  # WATCHTOWER - Automatic Container Updates
  # =============================================================================
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=${WATCHTOWER_CLEANUP:-true}
      - WATCHTOWER_POLL_INTERVAL=${WATCHTOWER_POLL_INTERVAL:-86400}
      - WATCHTOWER_ROLLING_RESTART=${WATCHTOWER_ROLLING_RESTART:-true}
      - WATCHTOWER_INCLUDE_STOPPED=${WATCHTOWER_INCLUDE_STOPPED:-true}
      - WATCHTOWER_REVIVE_STOPPED=false
      - WATCHTOWER_LOG_LEVEL=info
      - WATCHTOWER_SCHEDULE=${WATCHTOWER_SCHEDULE:-0 2 * * *}
      - TZ=${TZ:-UTC}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - homeai
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    healthcheck:
      test: ["CMD-SHELL", "pgrep watchtower || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s

 